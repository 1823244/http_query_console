// 01.11.2017 Леонов Александр - консолька http-запросов

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Элементы.ГруппаПрокси.Видимость = ИспользоватьПрокси;
КонецПроцедуры

#Область Команды

&НаКлиенте
Процедура ОбработчикКоманд(Команда)
	ВыполнитьЗапросПоМетоду(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКод(Команда)
	
	ПолучитьУниверсальныйКод(Команда);
	ПолучитьКодСВшитымиПроцедурами(Команда);
						
КонецПроцедуры

&НаКлиенте
Процедура лПрочитатьJSON(Команда)
	Если Найти(ВРег(Команда.Имя), "ЗАПРОСА")>0 Тогда
		ЗаполнитьДеревоJSON(ТекстЗапроса);
	Иначе
		ЗаполнитьДеревоJSON(РезультатЗапроса);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьJSON_запрос(Команда)
	ЗаписатьJSON_запросНаСервере();
КонецПроцедуры

#КонецОбласти

#Область Элементы

&НаКлиенте
Процедура СервисПриИзменении(Элемент)
	
	ПараметрыСервиса.Очистить();
	ДанныеНастройкиИзСтроки = ПолучитьСоответствиеПараметровПоСтрокеGetЗапроса(Сервис);
	Для Каждого ЭлДанныеНастройкиИзСтроки Из ДанныеНастройкиИзСтроки Цикл
		НовСтрока = ПараметрыСервиса.Добавить();
		НовСтрока.ИмяПараметра = ЭлДанныеНастройкиИзСтроки.Ключ;
		НовСтрока.ЗначениеПараметра = ЭлДанныеНастройкиИзСтроки.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСервисаПриИзменении(Элемент)
	
	ТекСервис = Лев(Сервис, Найти(Сервис,"?")-1);
	Если ПустаяСтрока(ТекСервис) Тогда
		ТекСервис = Сервис;
	КонецЕсли;
	
	СтруктураПараметров = Новый Соответствие;
	Для Каждого СтрПараметра Из ПараметрыСервиса Цикл
		СтруктураПараметров.Вставить(СтрПараметра.ИмяПараметра,СтрПараметра.ЗначениеПараметра);
	КонецЦикла;
	
	Сервис = ТекСервис + ПолучитьСтрокуПараметровGetЗапроса(СтруктураПараметров)
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроксиПриИзменении(Элемент)
	Элементы.ГруппаПрокси.Видимость = ИспользоватьПрокси;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыполнитьЗапросПоМетоду(ИмяМетода)
	
	Прокси = ПолучитьПрокси(ИспользоватьПрокси, ИспользоватьHTTPS, Прокси_Сервер, Прокси_Порт, Прокси_Логин, Прокси_Пароль, Прокси_АутентификацияWindows);
	
	Соединение = ПолучитьСоединениеHTTP(Сервер, Порт, ИспользоватьHTTPS, Логин, Пароль,,Прокси);
	
	ЗаголовкиHTTP = Новый Соответствие;
	Для Каждого ЭлементЗаголовка Из Заголовки Цикл
		ЗаголовкиHTTP.Вставить(ЭлементЗаголовка.ИмяЗаголовка, ЭлементЗаголовка.ЗначениеЗаголовка);
	КонецЦикла;
	
	Запрос = ПолучитьЗапросHTTP(Сервис, ЗаголовкиHTTP, ТекстЗапроса);
	
	Если ДаныеФормы.Количество() > 0 Тогда
		
		СоответствияДанныеФормы = Новый Соответствие;
		Для Каждого ЭлементДаныеФормы Из ДаныеФормы Цикл
			СоответствияДанныеФормы.Вставить(ЭлементДаныеФормы.ИмяПараметра, ЭлементДаныеФормы.ЗначениеПараметра);
		КонецЦикла;	
		
		ЗаполнитьPOSTЗапросДаннымиFormData(Запрос, СоответствияДанныеФормы);
		
	КонецЕсли;
	
	Если ВРег(ИмяМетода) = "POST" Тогда
		Результат = Соединение.ОтправитьДляОбработки(Запрос);
	ИначеЕсли ВРег(ИмяМетода) = "GET" Тогда
		Результат = Соединение.Получить(Запрос);
	ИначеЕсли ВРег(ИмяМетода) = "PUT" Тогда
		Результат = Соединение.Записать(Запрос);
	ИначеЕсли ВРег(ИмяМетода) = "PATCH" Тогда
		Результат = Соединение.Изменить(Запрос);
	ИначеЕсли ВРег(ИмяМетода) = "HEAD" Тогда
		Результат = Соединение.ПолучитьЗаголовки(Запрос);
	ИначеЕсли ВРег(ИмяМетода) = "DELETE" Тогда
		Результат = Соединение.Удалить(Запрос);
	
	КонецЕсли;
	
	ТекстОшибки = "";
	Если НЕ РезультатHTTPЗапросаСодержитОшибку(Результат,ТекстОшибки) Тогда
		РезультатЗапроса = Результат.ПолучитьТелоКакСтроку();
	КонецЕсли;
	ОписаниеОтвета = ?(Результат.КодСостояния = 200, "Запрос выполнен успешно", ТекстОшибки);
	КодСостоянияОтвета = Результат.КодСостояния;
	
КонецПроцедуры

#Область Вспомогательные

#Область РаботаСHTTP

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТелоPOSTЗапросаFormData(СписокСоответствий, РазделительBound = Неопределено, Кодировка = Неопределено)

	ТекстТелаЗапроса = "";
	
	Если НЕ ЗначениеЗаполнено(Кодировка) Тогда
		Кодировка = "UTF-8";
	КонецЕсли;
	
	//Получу разделитель
	Если Не ЗначениеЗаполнено(РазделительBound) Тогда
		РазделительBound = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Для Каждого СтрСписка Из СписокСоответствий Цикл
		ТекстТелаЗапроса = 	ТекстТелаЗапроса 
							+ Символы.ПС
							+ "--" + РазделительBound
							+ Символы.ПС
							+ "Content-Type: text/plain; charset="
							+ Кодировка
							+ Символы.ПС
							+ "Content-Disposition: form-data; name='"
							+ СтрСписка.Ключ
							+ "'"
							+ Символы.ПС
							+ Символы.ПС
							+ СтрСписка.Значение
							+ Символы.ПС
							+ "--" + РазделительBound;
							
	КонецЦикла;
	
	Возврат ТекстТелаЗапроса + "--";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьPOSTЗапросДаннымиFormData(ЗапросHTTP, СписокСоответствий, Кодировка = Неопределено) Экспорт
	
	//Получу разделитель
	РазделительBound = Строка(Новый УникальныйИдентификатор());
	
	ТекстТелаЗапроса = ПолучитьТелоPOSTЗапросаFormData(СписокСоответствий, РазделительBound, Кодировка);
	
	ЗапросHTTP.УстановитьТелоИзСтроки(ТекстТелаЗапроса);
	ЗапросHTTP.Заголовки.Вставить("Content-Type","multipart/form-data; boundary=""" + РазделительBound + """");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПрокси(ПроксиПоУмолчанию = Ложь, ЭтоHTTPS = Ложь, Сервер = "", Порт = 0, Пользователь = "", Пароль = "", ИспользоватьАутентификациюОС = Истина) Экспорт 
	
	нПрокси = Новый ИнтернетПрокси(ПроксиПоУмолчанию);
	
	Если ПроксиПоУмолчанию = Ложь И ЗначениеЗаполнено(Сервер) Тогда
		Протокол = ?(ЭтоHTTPS, "https", "http");
		нПрокси.Установить(Протокол, Сервер, Порт, Пользователь, Пароль, ИспользоватьАутентификациюОС);
	КонецЕсли;
	
	Возврат нПрокси;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСоединениеHTTP(	Сервер, 
								Порт, 
								ЭтоHTTPS = Ложь, 
								Логин = Неопределено, 
								Пароль = Неопределено, 
								Таймаут = Неопределено, 
								Прокси = Неопределено) Экспорт
	
	Если ЭтоHTTPS Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Иначе
		ssl = Неопределено;
	КонецЕсли;
	
	Если Прокси = Неопределено Тогда
		Прокси = Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(Сервер, Порт, Логин, Пароль, Прокси, Таймаут, ssl);
	
	Возврат Соединение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗапросHTTP(Сервис, Заголовки = Неопределено, ТелоЗапроса = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Заголовки) ИЛИ ТипЗнч(Заголовки) <> Тип("Соответствие") Тогда
		Заголовки = Новый Соответствие;
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос(Сервис, Заголовки);
	
	Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РезультатHTTPЗапросаСодержитОшибку(РезультатHttpЗапроса, ТекстОшибки = "", ВывестиСообщениеОбОшибке = Ложь) Экспорт
	
	Если РезультатHttpЗапроса.КодСостояния = 200 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РезультатHttpЗапроса.КодСостояния = 100 Тогда 
		ОписаниеСостояния = "Continue («продолжай»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 101 Тогда 
		ОписаниеСостояния = "Switching Protocols («переключение протоколов»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 102 Тогда 
		ОписаниеСостояния = "Processing («идёт обработка»)";
		
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 200 Тогда 
		ОписаниеСостояния = "OK («хорошо»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 201 Тогда 
		ОписаниеСостояния = "Created («создано»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 202 Тогда 
		ОписаниеСостояния = "Accepted («принято»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 203 Тогда 
		ОписаниеСостояния = "Non-Authoritative Information («информация не авторитетна»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 204 Тогда 
		ОписаниеСостояния = "No Content («нет содержимого»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 205 Тогда 
		ОписаниеСостояния = "Reset Content («сбросить содержимое»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 206 Тогда 
		ОписаниеСостояния = "Partial Content («частичное содержимое»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 207 Тогда 
		ОписаниеСостояния = "Multi-Status («многостатусный»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 208 Тогда 
		ОписаниеСостояния = "Already Reported («уже сообщалось»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 226 Тогда 
		ОписаниеСостояния = "IM Used («использовано IM»)";
		
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 300 Тогда 
		ОписаниеСостояния = "Multiple Choices («множество выборов»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 301 Тогда 
		ОписаниеСостояния = "Moved Permanently («перемещено навсегда»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 302 Тогда 
		ОписаниеСостояния = "Moved Temporarily («перемещено временно»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 302 Тогда 
		ОписаниеСостояния = "Found («найдено»)[7]";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 303 Тогда 
		ОписаниеСостояния = "See Other («смотреть другое»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 304 Тогда 
		ОписаниеСостояния = "Not Modified («не изменялось»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 305 Тогда 
		ОписаниеСостояния = "Use Proxy («использовать прокси»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 306 Тогда 
		ОписаниеСостояния = "зарезервировано (код использовался только в ранних спецификациях)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 307 Тогда 
		ОписаниеСостояния = "Temporary Redirect («временное перенаправление»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 308 Тогда 
		ОписаниеСостояния = "Permanent Redirect («постоянное перенаправление»)";
		
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 400 Тогда 
		ОписаниеСостояния = "Bad Request («плохой, неверный запрос»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 401 Тогда 
		ОписаниеСостояния = "Unauthorized («не авторизован»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 402 Тогда 
		ОписаниеСостояния = "Payment Required («необходима оплата»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 403 Тогда 
		ОписаниеСостояния = "Forbidden («запрещено»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 404 Тогда 
		ОписаниеСостояния = "Not Found («не найдено»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 405 Тогда 
		ОписаниеСостояния = "Method Not Allowed («метод не поддерживается»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 406 Тогда 
		ОписаниеСостояния = "Not Acceptable («неприемлемо»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 407 Тогда 
		ОписаниеСостояния = "Proxy Authentication Required («необходима аутентификация прокси»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 408 Тогда 
		ОписаниеСостояния = "Request Timeout («истекло время ожидания»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 409 Тогда 
		ОписаниеСостояния = "Conflict («конфликт»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 410 Тогда 
		ОписаниеСостояния = "Gone («удалён»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 411 Тогда 
		ОписаниеСостояния = "Length Required («необходима длина»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 412 Тогда 
		ОписаниеСостояния = "Precondition Failed («условие ложно»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 413 Тогда 
		ОписаниеСостояния = "Payload Too Large («полезная нагрузка слишком велика»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 414 Тогда 
		ОписаниеСостояния = "URI Too Long («URI слишком длинный»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 415 Тогда 
		ОписаниеСостояния = "Unsupported Media Type («неподдерживаемый тип данных»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 416 Тогда 
		ОписаниеСостояния = "Range Not Satisfiable («диапазон не достижим»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 417 Тогда 
		ОписаниеСостояния = "Expectation Failed («ожидание не удалось»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 418 Тогда 
		ОписаниеСостояния = "I’m a teapot («я — чайник»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 421 Тогда 
		ОписаниеСостояния = "Misdirected Request [10]";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 422 Тогда 
		ОписаниеСостояния = "Unprocessable Entity («необрабатываемый экземпляр»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 423 Тогда 
		ОписаниеСостояния = "Locked («заблокировано»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 424 Тогда 
		ОписаниеСостояния = "Failed Dependency («невыполненная зависимость»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 426 Тогда 
		ОписаниеСостояния = "Upgrade Required («необходимо обновление»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 428 Тогда 
		ОписаниеСостояния = "Precondition Required («необходимо предусловие»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 429 Тогда 
		ОписаниеСостояния = "Too Many Requests («слишком много запросов»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 431 Тогда 
		ОписаниеСостояния = "Request Header Fields Too Large («поля заголовка запроса слишком большие»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 444 Тогда 
		ОписаниеСостояния = "Закрывает соединение без передачи заголовка ответа. Нестандартный код";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 449 Тогда 
		ОписаниеСостояния = "Retry With («повторить с»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 451 Тогда 
		ОписаниеСостояния = "Unavailable For Legal Reasons («недоступно по юридическим причинам»)";

	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 500 Тогда 
		ОписаниеСостояния = "Internal Server Error («внутренняя ошибка сервера»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 501 Тогда 
		ОписаниеСостояния = "Not Implemented («не реализовано»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 502 Тогда 
		ОписаниеСостояния = "Bad Gateway («плохой, ошибочный шлюз»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 503 Тогда 
		ОписаниеСостояния = "Service Unavailable («сервис недоступен»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 504 Тогда 
		ОписаниеСостояния = "Gateway Timeout («шлюз не отвечает»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 505 Тогда 
		ОписаниеСостояния = "HTTP Version Not Supported («версия HTTP не поддерживается»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 506 Тогда 
		ОписаниеСостояния = "Variant Also Negotiates («вариант тоже проводит согласование»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 507 Тогда 
		ОписаниеСостояния = "Insufficient Storage («переполнение хранилища»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 508 Тогда 
		ОписаниеСостояния = "Loop Detected («обнаружено бесконечное перенаправление»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 509 Тогда 
		ОписаниеСостояния = "Bandwidth Limit Exceeded («исчерпана пропускная ширина канала»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 510 Тогда 
		ОписаниеСостояния = "Not Extended («не расширено»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 511 Тогда 
		ОписаниеСостояния = "Network Authentication Required («требуется сетевая аутентификация»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 520 Тогда 
		ОписаниеСостояния = "Unknown Error («неизвестная ошибка»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 521 Тогда 
		ОписаниеСостояния = "Web Server Is Down («веб-сервер не работает»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 522 Тогда 
		ОписаниеСостояния = "Connection Timed Out («соединение не отвечает»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 523 Тогда 
		ОписаниеСостояния = "Origin Is Unreachable («источник недоступен»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 524 Тогда 
		ОписаниеСостояния = "A Timeout Occurred («время ожидания истекло»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 525 Тогда 
		ОписаниеСостояния = "SSL Handshake Failed («квитирование SSL не удалось»)";
	ИначеЕсли РезультатHttpЗапроса.КодСостояния = 526 Тогда 
		ОписаниеСостояния = "Invalid SSL Certificate («недействительный сертификат SSL»)";
	Иначе
		ОписаниеСостояния = "";
	КонецЕсли;
	
	ОписаниеОшибки = 	"HTTP сервис вернул ошибку с кодом " 
						+ РезультатHttpЗапроса.КодСостояния 
						+ " " 
						+ ОписаниеСостояния 
						+ " " 
						+ РезультатHttpЗапроса.ПолучитьТелоКакСтроку();
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = ОписаниеОшибки;
	Иначе
		ТекстОшибки = ТекстОшибки + "; " + ОписаниеОшибки;
	КонецЕсли;
	
	Если ВывестиСообщениеОбОшибке Тогда
		Сообщить(ОписаниеОшибки);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуПараметровGetЗапроса(СтруктураПараметров) Экспорт
	
	РезСтрока = "";
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров) Тогда
		Возврат РезСтрока;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
		РезСтрока = РезСтрока + ЭлементСтруктуры.Ключ + "=" + СокрЛП(ЭлементСтруктуры.Значение) + "&";
	КонецЦикла;
	
	РезСтрока = Лев(РезСтрока, СтрДлина(РезСтрока) - 1);
	
	Если НЕ ПустаяСтрока(РезСтрока) Тогда
		РезСтрока = "?" + РезСтрока;
	КонецЕсли;
	
	Возврат РезСтрока;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСоответствиеПараметровПоСтрокеGetЗапроса(СтрокаЗапроса) Экспорт
	
	Рез = Новый Соответствие;
	
	СтрокаПараметров = Прав(СтрокаЗапроса, СтрДлина(СтрокаЗапроса) - Найти(СтрокаЗапроса,"?"));
	Попытка
		МассивПараметров = Вычислить("СтрРазделить(СтрокаПараметров,""&"",Ложь)");
	Исключение
		МассивПараметров = Вычислить("СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПараметров,""&"")");
	КонецПопытки;
	
	Для Каждого ЭлементПараметра Из МассивПараметров Цикл
		
		Попытка
			ДанныеПараметра = Вычислить("СтрРазделить(ЭлементПараметра,""="",Истина)");
		Исключение
			ДанныеПараметра = Вычислить("СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭлементПараметра,""="")");
		КонецПопытки;
		
		Если ДанныеПараметра.Количество()<2 Тогда 
			Продолжить; 
		КонецЕсли;
		
		Рез.Вставить(СокрЛП(ДанныеПараметра[0]), СокрЛП(ДанныеПараметра[1])); 
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

#КонецОбласти

#Область ГенерацияКода

&НаКлиенте
Процедура ПолучитьУниверсальныйКод(Команда)
	
	Рез = Новый ТекстовыйДокумент;
	
	Рез.ДобавитьСтроку("Сервер = """ + Сервер + """;");
	Рез.ДобавитьСтроку("Порт = " + СтрЗаменить(Порт, Символы.НПП, "") + ";");
	
	Рез.ДобавитьСтроку("Логин = """ + Логин + """;");
	Рез.ДобавитьСтроку("Пароль = """ + Пароль + """;");
	
	Рез.ДобавитьСтроку("Сервис = """ + Сервис + """;
	|");
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		
		ТекстСПереносами = СтрЗаменить(ТекстЗапроса, Символы.ПС, ""+ Символы.ПС + "|");
		ТекстСКавычками = СтрЗаменить(ТекстСПереносами, """", """""");
		
		Рез.ДобавитьСтроку("ТелоЗапроса = """ + ТекстСКавычками + """;
		|");
	КонецЕсли;
	
	Если ИспользоватьHTTPS Тогда
		Рез.ДобавитьСтроку("Ssl = Новый ЗащищенноеСоединениеOpenSSL();");
	КонецЕсли;
	
	Рез.ДобавитьСтроку("Прокси = Новый ИнтернетПрокси(" + ?(ИспользоватьПрокси, "Истина", "Ложь")+ ");");
	
	Если ИспользоватьПрокси И ЗначениеЗаполнено(Прокси_Сервер) Тогда
		Протокол = ?(ИспользоватьHTTPS, "https", "http");
			
		Рез.ДобавитьСтроку("Прокси.Установить(""" 	+ Протокол 
													+ """, """ 
													+ Прокси_Сервер 
													+ """, "
													+ ?(ЗначениеЗаполнено(Прокси_Порт), СтрЗаменить(Прокси_Порт, Символы.НПП,""), "") 
													+ ", "
													+ ?(ЗначениеЗаполнено(Прокси_Логин),"""" + Прокси_Логин + """", "")
													+ ", " 
													+ ?(ЗначениеЗаполнено(Прокси_Пароль),"""" + Прокси_Пароль + """", "")
													+ ", "
													+ ?(Прокси_АутентификацияWindows,"ИСТИНА","ЛОЖЬ") + ");
													|");
		
	КонецЕсли;
	
	
	Рез.ДобавитьСтроку(	"СоединениеHTTP = Новый HTTPСоединение(Сервер, Порт, Логин, Пароль, Прокси" 
						+ ?(ИспользоватьHTTPS, ",,Ssl", "") 
						+ ");");
						
	Рез.ДобавитьСтроку("
	|Заголовки = Новый Соответствие;");
	
	Для Каждого Стр Из Заголовки Цикл
		Рез.ДобавитьСтроку("Заголовки.Вставить("""+Стр.ИмяЗаголовка+""","""+Стр.ЗначениеЗаголовка+""");");
	КонецЦикла;
	
	
	РазделительBound = Строка(Новый УникальныйИдентификатор());
	Если ДаныеФормы.Количество() > 0 Тогда
		
		Рез.ДобавитьСтроку("Заголовки.Вставить(""Content-Type"",""multipart/form-data; boundary=""""" + РазделительBound + """"""");");
		
	КонецЕсли;
	
	
	Рез.ДобавитьСтроку("
	|ЗапросHTTP = Новый HTTPЗапрос(Сервис, Заголовки);");
	
	
	Если ДаныеФормы.Количество() > 0 Тогда
		
		СоответствияДанныеФормы = Новый Соответствие;
		Для Каждого ЭлементДаныеФормы Из ДаныеФормы Цикл
			СоответствияДанныеФормы.Вставить(ЭлементДаныеФормы.ИмяПараметра, ЭлементДаныеФормы.ЗначениеПараметра);
		КонецЦикла;	
		
		ТекстТелаЗапроса = ПолучитьТелоPOSTЗапросаFormData(СоответствияДанныеФормы, РазделительBound);
		
		МассивСтрок = РазложитьСтрокуВМассивПодстрок(ТекстТелаЗапроса, Символы.ПС);
		
		Рез.ДобавитьСтроку("ТелоЗапроса = """);
		Для Сч = 0 По МассивСтрок.ВГраница() Цикл
			Если Сч = 0 Тогда
				Рез.ДобавитьСтроку("|" + МассивСтрок[Сч]);
			ИначеЕсли Сч = МассивСтрок.ВГраница() Тогда
				Рез.ДобавитьСтроку("|" + МассивСтрок[Сч] + """;");
			Иначе
				Рез.ДобавитьСтроку("|" + МассивСтрок[Сч]);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстЗапроса) ИЛИ ДаныеФормы.Количество() > 0 Тогда
		Рез.ДобавитьСтроку("
		|ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса);");
	КонецЕсли;
	
	Рез.ДобавитьСтроку("");
	
	Если Команда.Имя = "КодPOST" Тогда
		Рез.ДобавитьСтроку("Результат = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);");
	ИначеЕсли Команда.Имя = "КодGET" Тогда
		Рез.ДобавитьСтроку("Результат = СоединениеHTTP.Получить(ЗапросHTTP);");
	ИначеЕсли Команда.Имя = "КодPUT" Тогда
		Рез.ДобавитьСтроку("Результат = СоединениеHTTP.Записать(ЗапросHTTP);");
	ИначеЕсли Команда.Имя = "КодPATCH" Тогда
		Рез.ДобавитьСтроку("Результат = СоединениеHTTP.Изменить(ЗапросHTTP);");
	ИначеЕсли Команда.Имя = "КодHEAD" Тогда
		Рез.ДобавитьСтроку("Результат = СоединениеHTTP.ПолучитьЗаголовки(ЗапросHTTP);");
	ИначеЕсли Команда.Имя = "КодDELETE" Тогда
		Рез.ДобавитьСтроку("Результат = СоединениеHTTP.Удалить(ЗапросHTTP);");
	Иначе
		Рез.ДобавитьСтроку("Результат = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);");
	КонецЕсли;
	
	Рез.ДобавитьСтроку("
	|Если Результат.КодСостояния <> 200 Тогда
	|   /" + "/Ошибка выполнения запроса
	|КонецЕсли;
	|
	|Данные = Результат.ПолучитьТелоКакСтроку();
	|");
	
	Рез.Показать("Универсальный текст");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКодСВшитымиПроцедурами(Команда)
	
	Если Не ПроцедурыИспользованияЕстьВКонфигурации() Тогда
		Возврат;
	КонецЕсли;
	
	Рез = Новый ТекстовыйДокумент;
	
	Если ИспользоватьHTTPS Тогда
		Рез.ДобавитьСтроку("ЭтоHTTPS = " + ?(ИспользоватьHTTPS, "Истина", "Ложь") + ";");
	КонецЕсли;
	
	Рез.ДобавитьСтроку("Сервер = """ + Сервер + """;");
	Рез.ДобавитьСтроку("Порт = " + СтрЗаменить(Порт, Символы.НПП, "") + ";");
	
	Рез.ДобавитьСтроку("Логин = """ + Логин + """;");
	Рез.ДобавитьСтроку("Пароль = """ + Пароль + """;");
	
	Рез.ДобавитьСтроку("Сервис = """ + Сервис + """;
	|");
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		
		ТекстСПереносами = СтрЗаменить(ТекстЗапроса, Символы.ПС, ""+ Символы.ПС + "|");
		ТекстСКавычками = СтрЗаменить(ТекстСПереносами, """", """""");
		
		Рез.ДобавитьСтроку("ТелоЗапроса = """ + ТекстСКавычками + """;
		|");
	КонецЕсли;
	
	Рез.ДобавитьСтроку("СоединениеHTTP = ОбщегоНазначенияКлиентСервер.ПолучитьСоединениеHTTP(Сервер, Порт, ЭтоHTTPS, Логин, Пароль);");
						
	Рез.ДобавитьСтроку("
	|Заголовки = Новый Соответствие;");
	
	Для Каждого Стр Из Заголовки Цикл
		Рез.ДобавитьСтроку("Заголовки.Вставить("""+Стр.ИмяЗаголовка+""","""+Стр.ЗначениеЗаголовка+""");");
	КонецЦикла;
	
	
	Рез.ДобавитьСтроку("
	|ЗапросHTTP = ОбщегоНазначенияКлиентСервер.ПолучитьЗапросHTTP(Сервис, Заголовки" + ?(ЗначениеЗаполнено(ТекстЗапроса), ", ТелоЗапроса","") +");");
	
	Рез.ДобавитьСтроку("");
	
	Если Команда.Имя = "КодPOST" Тогда
		Рез.ДобавитьСтроку("Результат = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);");
	ИначеЕсли Команда.Имя = "КодGET" Тогда
		Рез.ДобавитьСтроку("Результат = СоединениеHTTP.Получить(ЗапросHTTP);");
	ИначеЕсли Команда.Имя = "КодPUT" Тогда
		Рез.ДобавитьСтроку("Результат = СоединениеHTTP.Записать(ЗапросHTTP);");
	ИначеЕсли Команда.Имя = "КодPATCH" Тогда
		Рез.ДобавитьСтроку("Результат = СоединениеHTTP.Изменить(ЗапросHTTP);");
	ИначеЕсли Команда.Имя = "КодHEAD" Тогда
		Рез.ДобавитьСтроку("Результат = СоединениеHTTP.ПолучитьЗаголовки(ЗапросHTTP);");
	ИначеЕсли Команда.Имя = "КодDELETE" Тогда
		Рез.ДобавитьСтроку("Результат = СоединениеHTTP.Удалить(ЗапросHTTP);");
	Иначе
		Рез.ДобавитьСтроку("Результат = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);");
	КонецЕсли;
	
	Рез.ДобавитьСтроку("
	|Если ОбщегоНазначенияКлиентСервер.РезультатHTTPЗапросаСодержитОшибку(Результат,,Истина) Тогда
	|	/" + "/Ошибка выполнения запроса
	|КонецЕсли;
	|
	|Данные = Результат.ПолучитьТелоКакСтроку();
	|");
	
	Рез.Показать("Текст для этой конфигурации");	
	
	
КонецПроцедуры

&НаСервере
Функция ПроцедурыИспользованияЕстьВКонфигурации()
	Попытка 
		Рез = Вычислить("ОбщегоНазначенияКлиентСервер.ПолучитьЗапросHTTP(""test"")");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

// Функция "расщепляет" строку на подстроки, используя заданный
//      разделитель. Разделитель может иметь любую длину.
//      Если в качестве разделителя задан пробел, рядом стоящие пробелы
//      считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//      игнорируются.
//      Например,
//      РазложитьСтрокуВМассивПодстрок(",один,,,два", ",") возвратит массив значений из пяти элементов,
//      три из которых - пустые строки, а
//      РазложитьСтрокуВМассивПодстрок(" один   два", " ") возвратит массив значений из двух элементов
//
//  Параметры:
//      Стр -           строка, которую необходимо разложить на подстроки.
//                      Параметр передается по значению.
//      Разделитель -   строка-разделитель, по умолчанию - запятая.
//
//  Возвращаемое значение:
//      массив значений, элементы которого - подстроки
//
&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				Если (СокрЛП(Стр) <> "") Тогда
					МассивСтрок.Добавить(Стр);
				КонецЕсли;
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз - 1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции 

#КонецОбласти

#Область JSON

&НаСервере
Процедура ЗаполнитьДеревоJSON(ТекстJSON)
	лОбъектJSON = JsonВОбъект(ТекстJSON);
	нДерево = НовыйДеревоЗначенийПоМассивуСтруктур(лОбъектJSON);
	ЗначениеВРеквизитФормы(нДерево,"ОбъектJSON");
КонецПроцедуры

&НаСервере
Процедура ЗаписатьJSON_запросНаСервере()
	лДеревоJSON = РеквизитФормыВЗначение("ОбъектJSON");
	лОбъектJSON = НовыйОбъектПоДереву(лДеревоJSON);
	ТекстЗапроса = ОбъектВJson(лОбъектJSON);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция JsonВОбъект(СтрокаJSON) Экспорт 
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрЗаменить(СтрокаJSON,"==","NevW"));
	
	Возврат ПрочитатьJSON(Чтение,,);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбъектВJson(Объект) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Объект);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ГенерацияДерева

&НаСервереБезКонтекста
Функция НовыйДеревоЗначенийПоМассивуСтруктур(МассивСтруктур)
	
	Рез = Новый ДеревоЗначений;
	Рез.Колонки.Добавить("Свойство");
	Рез.Колонки.Добавить("Значение");
	
	Если ТипЗнч(МассивСтруктур) = Тип("Структура") Тогда
		ЭлементСтруктурыВДеревоЗначений(Рез, МассивСтруктур);
	ИначеЕсли ТипЗнч(МассивСтруктур) = Тип("Массив") Тогда
		МассивВДеревоЗначений(Рез, МассивСтруктур, "");
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЭлементСтруктурыВДеревоЗначений(Дерево,Структура)
	
	Для Каждого ЭлСтруктуры Из Структура Цикл
		
		нСтрока = Дерево.Строки.Добавить();
		нСтрока.Свойство = ЭлСтруктуры.Ключ;
		
		Если ТипЗнч(ЭлСтруктуры.Значение) = Тип("Структура") Тогда
			ЭлементСтруктурыВДеревоЗначений(нСтрока, ЭлСтруктуры.Значение);
		ИначеЕсли ТипЗнч(ЭлСтруктуры.Значение) = Тип("Массив") Тогда
			нСтрока.Значение = "[Массив]";
			МассивВДеревоЗначений(нСтрока, ЭлСтруктуры.Значение, ЭлСтруктуры.Ключ);
		Иначе
			нСтрока.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура МассивВДеревоЗначений(Дерево, Массив, ИмяСвойства)
	
	Для Каждого СтрМассива Из Массив Цикл
		
		нСтрока = Дерево.Строки.Добавить();
		нСтрока.Свойство = "[Элемент " + ИмяСвойства + "]";
		
		Если ТипЗнч(СтрМассива) = Тип("Структура") Тогда
			ЭлементСтруктурыВДеревоЗначений(нСтрока, СтрМассива);
		ИначеЕсли ТипЗнч(СтрМассива) = Тип("Массив") Тогда
			//Чудеса
			нСтрока.Значение = "[Массив]";
			МассивВДеревоЗначений(нСтрока, СтрМассива, ИмяСвойства);
		Иначе
			нСтрока.Значение = СтрМассива;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ГенерацияОбъектаПоДереву

&НаСервереБезКонтекста
Функция НовыйОбъектПоДереву(Дерево)
	Возврат ВосстановитьОбъект(Дерево, Ложь);
КонецФункции
	
&НаСервереБезКонтекста
Функция ВосстановитьОбъект(Дерево, ЭтоМассив = Ложь)
	
	Рез = ?(ЭтоМассив, Новый Массив, Новый Структура);
	Для Каждого Стр Из Дерево.Строки Цикл
		
		Если Стр.Значение = "[Массив]" Тогда
			Значение = ВосстановитьОбъект(Стр, Истина);
		ИначеЕсли Стр.Строки.Количество() = 0 Тогда 
			Значение = Стр.Значение;
		ИначеЕсли Стр.Строки.Количество() > 0 Тогда
			Значение = ВосстановитьОбъект(Стр, Ложь);
		КонецЕсли;
		
		Если ЭтоМассив Тогда
			Рез.Добавить(Значение);
		Иначе
			Рез.Вставить(Стр.Свойство, Значение)
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

#КонецОбласти

#КонецОбласти
